// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

// NextAuth Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Relaciones con las entidades financieras
  transactions  Transaction[]
  categories    Category[]
  debts         Debt[]
  budgets       Budget[]
  settings      Settings?
  notifications Notification[]
  savingGoals   SavingGoal[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos específicos para la aplicación de finanzas

model Transaction {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  type        String   // "income", "expense"
  category    String
  recurrence  String?  // "none", "daily", "weekly", "biweekly", "monthly", "quarterly", "yearly"
  notes       String?  @db.Text
  
  // Relación con el usuario
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String
  icon        String
  color       String
  type        String   // "income", "expense", "both"
  
  // Relación con el usuario
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([name, userId])
}

model Debt {
  id              String   @id @default(cuid())
  description     String
  totalAmount     Float
  remainingAmount Float
  monthlyPayment  Float
  nextPaymentDate DateTime
  frequency       String?  @default("monthly") // "daily", "weekly", "biweekly", "monthly", "quarterly", "yearly"
  creditor        String?
  interestRate    Float?
  interestFrequency String? @default("monthly") // "weekly", "biweekly", "monthly", "quarterly", "yearly"
  linkedTransactions String? // Almacenado como JSON string con IDs de transacciones
  
  // Relación con el usuario
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Budget {
  id          String   @id @default(cuid())
  category    String
  amount      Float
  period      String   // "weekly", "monthly", "yearly"
  spent       Float    @default(0)
  
  // Relación con el usuario
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id               String  @id @default(cuid())
  currency         String  @default("USD")
  dateFormat       String  @default("dd/MM/yyyy")
  language         String  @default("es")
  startWeekOnMonday Boolean @default(true)
  reminderDays     Int     @default(3)
  budgetThreshold  Int     @default(80)
  
  // Relación con el usuario (one-to-one)
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Modelo para notificaciones
model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   // "payment", "budget", "debt", "info"
  status      String   @default("unread") // "unread", "read"
  reference   String?  // ID de referencia (ej: transactionId, debtId, etc.)
  referenceType String? // Tipo de referencia (ej: "transaction", "debt", "budget")
  date        DateTime @default(now())
  
  // Relación con el usuario
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modelo para metas de ahorro
model SavingGoal {
  id          String   @id @default(cuid())
  name        String
  description String?
  targetAmount Float
  currentAmount Float    @default(0)
  deadline    DateTime?
  icon        String?   @default("PiggyBank")
  color       String?   @default("#10b981")
  status      String    @default("active") // "active", "completed", "cancelled"
  
  // Relación con el usuario
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
